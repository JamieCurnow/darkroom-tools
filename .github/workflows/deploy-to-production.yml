name: Deploy to production

# publish on release
on:
  workflow_dispatch:
    inputs:
      releaseNotes:
        description: 'Release Notes'
        required: false
        default: ''
      isHotfix:
        type: boolean
        description: This is a hotfix, don't merge releases/staging -> releases/production

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - name: Merge releases/staging -> releases/production
        uses: devmasx/merge-branch@master
        if: ${{ github.event.inputs.isHotfix != 'true' }}
        with:
          type: now
          from_branch: releases/staging
          target_branch: releases/production
          github_token: ${{ github.token }}

      - name: Checkout 🛎
        uses: actions/checkout@master
        with:
          ref: releases/production

      - name: Cache node modules
        uses: actions/cache@v3
        id: cache-nodemodules
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in on Linux/macOS
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install project dependencies 👨🏻‍💻
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Cache node modules for functions
        uses: actions/cache@v3
        id: cache-nodemodules-functions
        env:
          cache-name: cache-node-modules-functions
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install functions project dependencies 👨🏻‍💻
        if: steps.cache-nodemodules-functions.outputs.cache-hit != 'true'
        run: cd functions && npm ci && cd ../
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create .npmrc file
        run: sed -i -- 's/${NPM_TOKEN}/'"$NPM_TOKEN"'/g' .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Write the Google app credential file from secret
        run: touch ./GOOGLE_APPLICATION_CREDENTIALS.json && echo $GOOGLE_SERVICE_ACCOUNT > ./GOOGLE_APPLICATION_CREDENTIALS.json
        env:
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PRODUCTION }}

      - name: Build functions
        run: cd functions && npm run build

      - name: Deploy nuxt app to Firebase
        run: npm run deploy:production
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./GOOGLE_APPLICATION_CREDENTIALS.json
          DOPPLER_SERVICE_TOKEN: ${{ secrets.DOPPLER_SERVICE_TOKEN_PRODUCTION }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          ENV: production

      - name: Run firestore Migrations
        run: npm run firestoreMigrations
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ./GOOGLE_APPLICATION_CREDENTIALS.json
          ENV: production
